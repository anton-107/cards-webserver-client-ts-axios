/* tslint:disable */
/* eslint-disable */
/**
 * Cards API
 * The api to manage cards
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateCardDto
 */
export interface CreateCardDto {
    /**
     * 
     * @type {string}
     * @memberof CreateCardDto
     */
    'spaceID': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCardDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCardDto
     */
    'parentCardID': string;
    /**
     * 
     * @type {object}
     * @memberof CreateCardDto
     */
    'attributes': object;
}
/**
 * 
 * @export
 * @interface UpdateCardDto
 */
export interface UpdateCardDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateCardDto
     */
    'spaceID': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCardDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCardDto
     */
    'parentCardID': string;
    /**
     * 
     * @type {object}
     * @memberof UpdateCardDto
     */
    'attributes': object;
}

/**
 * CardsAuthApi - axios parameter creator
 * @export
 */
export const CardsAuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignIn: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/signin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardsAuthApi - functional programming interface
 * @export
 */
export const CardsAuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardsAuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerSignIn(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerSignIn(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardsAuthApi.authControllerSignIn']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CardsAuthApi - factory interface
 * @export
 */
export const CardsAuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardsAuthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignIn(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerSignIn(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CardsAuthApi - object-oriented interface
 * @export
 * @class CardsAuthApi
 * @extends {BaseAPI}
 */
export class CardsAuthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsAuthApi
     */
    public authControllerSignIn(options?: RawAxiosRequestConfig) {
        return CardsAuthApiFp(this.configuration).authControllerSignIn(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CardsCRUDApi - axios parameter creator
 * @export
 */
export const CardsCRUDApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} type 
         * @param {CreateCardDto} createCardDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerCreate: async (type: string, createCardDto: CreateCardDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('cardControllerCreate', 'type', type)
            // verify required parameter 'createCardDto' is not null or undefined
            assertParamExists('cardControllerCreate', 'createCardDto', createCardDto)
            const localVarPath = `/card/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCardDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerFindAll: async (type: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('cardControllerFindAll', 'type', type)
            const localVarPath = `/card/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} type 
         * @param {string} parentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerFindChildren: async (type: string, parentID: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('cardControllerFindChildren', 'type', type)
            // verify required parameter 'parentID' is not null or undefined
            assertParamExists('cardControllerFindChildren', 'parentID', parentID)
            const localVarPath = `/card/{type}/children-of/{parentID}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"parentID"}}`, encodeURIComponent(String(parentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} type 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerFindOne: async (type: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('cardControllerFindOne', 'type', type)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cardControllerFindOne', 'id', id)
            const localVarPath = `/card/{type}/{id}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} type 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerRemove: async (type: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('cardControllerRemove', 'type', type)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cardControllerRemove', 'id', id)
            const localVarPath = `/card/{type}/{id}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} type 
         * @param {string} id 
         * @param {UpdateCardDto} updateCardDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerUpdate: async (type: string, id: string, updateCardDto: UpdateCardDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('cardControllerUpdate', 'type', type)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cardControllerUpdate', 'id', id)
            // verify required parameter 'updateCardDto' is not null or undefined
            assertParamExists('cardControllerUpdate', 'updateCardDto', updateCardDto)
            const localVarPath = `/card/{type}/{id}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCardDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardsCRUDApi - functional programming interface
 * @export
 */
export const CardsCRUDApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardsCRUDApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} type 
         * @param {CreateCardDto} createCardDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cardControllerCreate(type: string, createCardDto: CreateCardDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cardControllerCreate(type, createCardDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardsCRUDApi.cardControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cardControllerFindAll(type: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cardControllerFindAll(type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardsCRUDApi.cardControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} type 
         * @param {string} parentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cardControllerFindChildren(type: string, parentID: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cardControllerFindChildren(type, parentID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardsCRUDApi.cardControllerFindChildren']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} type 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cardControllerFindOne(type: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cardControllerFindOne(type, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardsCRUDApi.cardControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} type 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cardControllerRemove(type: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cardControllerRemove(type, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardsCRUDApi.cardControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} type 
         * @param {string} id 
         * @param {UpdateCardDto} updateCardDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cardControllerUpdate(type: string, id: string, updateCardDto: UpdateCardDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cardControllerUpdate(type, id, updateCardDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardsCRUDApi.cardControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CardsCRUDApi - factory interface
 * @export
 */
export const CardsCRUDApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardsCRUDApiFp(configuration)
    return {
        /**
         * 
         * @param {CardsCRUDApiCardControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerCreate(requestParameters: CardsCRUDApiCardControllerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cardControllerCreate(requestParameters.type, requestParameters.createCardDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CardsCRUDApiCardControllerFindAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerFindAll(requestParameters: CardsCRUDApiCardControllerFindAllRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cardControllerFindAll(requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CardsCRUDApiCardControllerFindChildrenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerFindChildren(requestParameters: CardsCRUDApiCardControllerFindChildrenRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cardControllerFindChildren(requestParameters.type, requestParameters.parentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CardsCRUDApiCardControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerFindOne(requestParameters: CardsCRUDApiCardControllerFindOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cardControllerFindOne(requestParameters.type, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CardsCRUDApiCardControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerRemove(requestParameters: CardsCRUDApiCardControllerRemoveRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cardControllerRemove(requestParameters.type, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CardsCRUDApiCardControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerUpdate(requestParameters: CardsCRUDApiCardControllerUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cardControllerUpdate(requestParameters.type, requestParameters.id, requestParameters.updateCardDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cardControllerCreate operation in CardsCRUDApi.
 * @export
 * @interface CardsCRUDApiCardControllerCreateRequest
 */
export interface CardsCRUDApiCardControllerCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof CardsCRUDApiCardControllerCreate
     */
    readonly type: string

    /**
     * 
     * @type {CreateCardDto}
     * @memberof CardsCRUDApiCardControllerCreate
     */
    readonly createCardDto: CreateCardDto
}

/**
 * Request parameters for cardControllerFindAll operation in CardsCRUDApi.
 * @export
 * @interface CardsCRUDApiCardControllerFindAllRequest
 */
export interface CardsCRUDApiCardControllerFindAllRequest {
    /**
     * 
     * @type {string}
     * @memberof CardsCRUDApiCardControllerFindAll
     */
    readonly type: string
}

/**
 * Request parameters for cardControllerFindChildren operation in CardsCRUDApi.
 * @export
 * @interface CardsCRUDApiCardControllerFindChildrenRequest
 */
export interface CardsCRUDApiCardControllerFindChildrenRequest {
    /**
     * 
     * @type {string}
     * @memberof CardsCRUDApiCardControllerFindChildren
     */
    readonly type: string

    /**
     * 
     * @type {string}
     * @memberof CardsCRUDApiCardControllerFindChildren
     */
    readonly parentID: string
}

/**
 * Request parameters for cardControllerFindOne operation in CardsCRUDApi.
 * @export
 * @interface CardsCRUDApiCardControllerFindOneRequest
 */
export interface CardsCRUDApiCardControllerFindOneRequest {
    /**
     * 
     * @type {string}
     * @memberof CardsCRUDApiCardControllerFindOne
     */
    readonly type: string

    /**
     * 
     * @type {string}
     * @memberof CardsCRUDApiCardControllerFindOne
     */
    readonly id: string
}

/**
 * Request parameters for cardControllerRemove operation in CardsCRUDApi.
 * @export
 * @interface CardsCRUDApiCardControllerRemoveRequest
 */
export interface CardsCRUDApiCardControllerRemoveRequest {
    /**
     * 
     * @type {string}
     * @memberof CardsCRUDApiCardControllerRemove
     */
    readonly type: string

    /**
     * 
     * @type {string}
     * @memberof CardsCRUDApiCardControllerRemove
     */
    readonly id: string
}

/**
 * Request parameters for cardControllerUpdate operation in CardsCRUDApi.
 * @export
 * @interface CardsCRUDApiCardControllerUpdateRequest
 */
export interface CardsCRUDApiCardControllerUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof CardsCRUDApiCardControllerUpdate
     */
    readonly type: string

    /**
     * 
     * @type {string}
     * @memberof CardsCRUDApiCardControllerUpdate
     */
    readonly id: string

    /**
     * 
     * @type {UpdateCardDto}
     * @memberof CardsCRUDApiCardControllerUpdate
     */
    readonly updateCardDto: UpdateCardDto
}

/**
 * CardsCRUDApi - object-oriented interface
 * @export
 * @class CardsCRUDApi
 * @extends {BaseAPI}
 */
export class CardsCRUDApi extends BaseAPI {
    /**
     * 
     * @param {CardsCRUDApiCardControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsCRUDApi
     */
    public cardControllerCreate(requestParameters: CardsCRUDApiCardControllerCreateRequest, options?: RawAxiosRequestConfig) {
        return CardsCRUDApiFp(this.configuration).cardControllerCreate(requestParameters.type, requestParameters.createCardDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CardsCRUDApiCardControllerFindAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsCRUDApi
     */
    public cardControllerFindAll(requestParameters: CardsCRUDApiCardControllerFindAllRequest, options?: RawAxiosRequestConfig) {
        return CardsCRUDApiFp(this.configuration).cardControllerFindAll(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CardsCRUDApiCardControllerFindChildrenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsCRUDApi
     */
    public cardControllerFindChildren(requestParameters: CardsCRUDApiCardControllerFindChildrenRequest, options?: RawAxiosRequestConfig) {
        return CardsCRUDApiFp(this.configuration).cardControllerFindChildren(requestParameters.type, requestParameters.parentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CardsCRUDApiCardControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsCRUDApi
     */
    public cardControllerFindOne(requestParameters: CardsCRUDApiCardControllerFindOneRequest, options?: RawAxiosRequestConfig) {
        return CardsCRUDApiFp(this.configuration).cardControllerFindOne(requestParameters.type, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CardsCRUDApiCardControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsCRUDApi
     */
    public cardControllerRemove(requestParameters: CardsCRUDApiCardControllerRemoveRequest, options?: RawAxiosRequestConfig) {
        return CardsCRUDApiFp(this.configuration).cardControllerRemove(requestParameters.type, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CardsCRUDApiCardControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsCRUDApi
     */
    public cardControllerUpdate(requestParameters: CardsCRUDApiCardControllerUpdateRequest, options?: RawAxiosRequestConfig) {
        return CardsCRUDApiFp(this.configuration).cardControllerUpdate(requestParameters.type, requestParameters.id, requestParameters.updateCardDto, options).then((request) => request(this.axios, this.basePath));
    }
}



