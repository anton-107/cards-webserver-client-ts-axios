"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Cards API
 * The api to manage cards
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CardsCRUDApi = exports.CardsCRUDApiFactory = exports.CardsCRUDApiFp = exports.CardsCRUDApiAxiosParamCreator = exports.CardsAuthApi = exports.CardsAuthApiFactory = exports.CardsAuthApiFp = exports.CardsAuthApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * CardsAuthApi - axios parameter creator
 * @export
 */
const CardsAuthApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignIn: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/auth/signin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.CardsAuthApiAxiosParamCreator = CardsAuthApiAxiosParamCreator;
/**
 * CardsAuthApi - functional programming interface
 * @export
 */
const CardsAuthApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.CardsAuthApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignIn(options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.authControllerSignIn(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CardsAuthApi.authControllerSignIn']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.CardsAuthApiFp = CardsAuthApiFp;
/**
 * CardsAuthApi - factory interface
 * @export
 */
const CardsAuthApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.CardsAuthApiFp)(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignIn(options) {
            return localVarFp.authControllerSignIn(options).then((request) => request(axios, basePath));
        },
    };
};
exports.CardsAuthApiFactory = CardsAuthApiFactory;
/**
 * CardsAuthApi - object-oriented interface
 * @export
 * @class CardsAuthApi
 * @extends {BaseAPI}
 */
class CardsAuthApi extends base_1.BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsAuthApi
     */
    authControllerSignIn(options) {
        return (0, exports.CardsAuthApiFp)(this.configuration).authControllerSignIn(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CardsAuthApi = CardsAuthApi;
/**
 * CardsCRUDApi - axios parameter creator
 * @export
 */
const CardsCRUDApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} type
         * @param {CreateCardDto} createCardDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerCreate: (type, createCardDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'type' is not null or undefined
            (0, common_1.assertParamExists)('cardControllerCreate', 'type', type);
            // verify required parameter 'createCardDto' is not null or undefined
            (0, common_1.assertParamExists)('cardControllerCreate', 'createCardDto', createCardDto);
            const localVarPath = `/card/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createCardDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerFindAll: (type, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'type' is not null or undefined
            (0, common_1.assertParamExists)('cardControllerFindAll', 'type', type);
            const localVarPath = `/card/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} type
         * @param {string} parentID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerFindChildren: (type, parentID, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'type' is not null or undefined
            (0, common_1.assertParamExists)('cardControllerFindChildren', 'type', type);
            // verify required parameter 'parentID' is not null or undefined
            (0, common_1.assertParamExists)('cardControllerFindChildren', 'parentID', parentID);
            const localVarPath = `/card/{type}/children-of/{parentID}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"parentID"}}`, encodeURIComponent(String(parentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} type
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerFindOne: (type, id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'type' is not null or undefined
            (0, common_1.assertParamExists)('cardControllerFindOne', 'type', type);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('cardControllerFindOne', 'id', id);
            const localVarPath = `/card/{type}/{id}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} type
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerRemove: (type, id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'type' is not null or undefined
            (0, common_1.assertParamExists)('cardControllerRemove', 'type', type);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('cardControllerRemove', 'id', id);
            const localVarPath = `/card/{type}/{id}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} type
         * @param {string} id
         * @param {UpdateCardDto} updateCardDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerUpdate: (type, id, updateCardDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'type' is not null or undefined
            (0, common_1.assertParamExists)('cardControllerUpdate', 'type', type);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('cardControllerUpdate', 'id', id);
            // verify required parameter 'updateCardDto' is not null or undefined
            (0, common_1.assertParamExists)('cardControllerUpdate', 'updateCardDto', updateCardDto);
            const localVarPath = `/card/{type}/{id}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateCardDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.CardsCRUDApiAxiosParamCreator = CardsCRUDApiAxiosParamCreator;
/**
 * CardsCRUDApi - functional programming interface
 * @export
 */
const CardsCRUDApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.CardsCRUDApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} type
         * @param {CreateCardDto} createCardDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerCreate(type, createCardDto, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cardControllerCreate(type, createCardDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CardsCRUDApi.cardControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @param {string} type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerFindAll(type, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cardControllerFindAll(type, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CardsCRUDApi.cardControllerFindAll']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @param {string} type
         * @param {string} parentID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerFindChildren(type, parentID, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cardControllerFindChildren(type, parentID, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CardsCRUDApi.cardControllerFindChildren']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @param {string} type
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerFindOne(type, id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cardControllerFindOne(type, id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CardsCRUDApi.cardControllerFindOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @param {string} type
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerRemove(type, id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cardControllerRemove(type, id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CardsCRUDApi.cardControllerRemove']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @param {string} type
         * @param {string} id
         * @param {UpdateCardDto} updateCardDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerUpdate(type, id, updateCardDto, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cardControllerUpdate(type, id, updateCardDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CardsCRUDApi.cardControllerUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.CardsCRUDApiFp = CardsCRUDApiFp;
/**
 * CardsCRUDApi - factory interface
 * @export
 */
const CardsCRUDApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.CardsCRUDApiFp)(configuration);
    return {
        /**
         *
         * @param {CardsCRUDApiCardControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerCreate(requestParameters, options) {
            return localVarFp.cardControllerCreate(requestParameters.type, requestParameters.createCardDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CardsCRUDApiCardControllerFindAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerFindAll(requestParameters, options) {
            return localVarFp.cardControllerFindAll(requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CardsCRUDApiCardControllerFindChildrenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerFindChildren(requestParameters, options) {
            return localVarFp.cardControllerFindChildren(requestParameters.type, requestParameters.parentID, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CardsCRUDApiCardControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerFindOne(requestParameters, options) {
            return localVarFp.cardControllerFindOne(requestParameters.type, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CardsCRUDApiCardControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerRemove(requestParameters, options) {
            return localVarFp.cardControllerRemove(requestParameters.type, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CardsCRUDApiCardControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardControllerUpdate(requestParameters, options) {
            return localVarFp.cardControllerUpdate(requestParameters.type, requestParameters.id, requestParameters.updateCardDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.CardsCRUDApiFactory = CardsCRUDApiFactory;
/**
 * CardsCRUDApi - object-oriented interface
 * @export
 * @class CardsCRUDApi
 * @extends {BaseAPI}
 */
class CardsCRUDApi extends base_1.BaseAPI {
    /**
     *
     * @param {CardsCRUDApiCardControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsCRUDApi
     */
    cardControllerCreate(requestParameters, options) {
        return (0, exports.CardsCRUDApiFp)(this.configuration).cardControllerCreate(requestParameters.type, requestParameters.createCardDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CardsCRUDApiCardControllerFindAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsCRUDApi
     */
    cardControllerFindAll(requestParameters, options) {
        return (0, exports.CardsCRUDApiFp)(this.configuration).cardControllerFindAll(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CardsCRUDApiCardControllerFindChildrenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsCRUDApi
     */
    cardControllerFindChildren(requestParameters, options) {
        return (0, exports.CardsCRUDApiFp)(this.configuration).cardControllerFindChildren(requestParameters.type, requestParameters.parentID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CardsCRUDApiCardControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsCRUDApi
     */
    cardControllerFindOne(requestParameters, options) {
        return (0, exports.CardsCRUDApiFp)(this.configuration).cardControllerFindOne(requestParameters.type, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CardsCRUDApiCardControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsCRUDApi
     */
    cardControllerRemove(requestParameters, options) {
        return (0, exports.CardsCRUDApiFp)(this.configuration).cardControllerRemove(requestParameters.type, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CardsCRUDApiCardControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsCRUDApi
     */
    cardControllerUpdate(requestParameters, options) {
        return (0, exports.CardsCRUDApiFp)(this.configuration).cardControllerUpdate(requestParameters.type, requestParameters.id, requestParameters.updateCardDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CardsCRUDApi = CardsCRUDApi;
